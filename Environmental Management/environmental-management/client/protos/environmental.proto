syntax = "proto3";

package environmental;

// #1 Street Lights Client-side streaming 

// Message to send light levels data
message LightData {
int64 timeStamp = 1; // Time in UTC
int64 sensorID = 2; // id of the light sensor
int64 lightAmount = 3; // amount of light per unit area
}
 
// Message to respond with street light illumination
message LightIlluminate {
int64 timestamp = 1; // timestamp of the illumination
string message = 2; // message that the street lights have been switched on
}

// #2 Water Quality Spot Checks Unary rpc connection

message requestWaterData {
int64 treatPlantID = 1; // id of the Water Treatment Plant
string opName = 2;
}

message responseWaterData {
string timeStamp = 1; // Date and Time of reading
int64 treatPlantID = 2; // id of the Water Treatment Plant
int64 result = 3;
string message = 4;
string opName = 5;
}


 
// The service definition
service EnvManagement {
    // Client-side RPC to switch on lights in response to natural light data
    rpc streetLights (stream LightData) returns (LightIlluminate) {}

    // Unary RPC to request real-time water quality data 
    rpc waterData (requestWaterData) returns (responseWaterData) {}
}